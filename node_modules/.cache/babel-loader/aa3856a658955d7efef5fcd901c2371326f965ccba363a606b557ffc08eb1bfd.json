{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VishwajithJayasinghe\\\\Documents\\\\MyDocs\\\\Projects\\\\React-front-end\\\\src\\\\components\\\\data-table\\\\data-table.component.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo, useCallback } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\"; // the AG Grid React Component\n\nimport \"ag-grid-community/styles/ag-grid.css\"; // Core grid CSS, always needed\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"; // Optional theme CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataTable = props => {\n  _s();\n  const {\n    tableHeight,\n    tableWidth\n  } = props;\n  const gridRef = useRef(); // Optional - for accessing Grid's API\n  //const [rowData, setRowData] = useState<string[]>(); // Set rowData to Array of Objects, one Object per Row\n\n  // Each Column Definition results in one Column.\n  // const [columnDefs, setColumnDefs] = useState([\n  //   {field: 'make', filter: true},\n  //   {field: 'model', filter: true},\n  //   {field: 'price'}\n  // ]);\n\n  // DefaultColDef sets props common to all Columns\n  const defaultColDef = useMemo(() => ({\n    sortable: true,\n    minWidth: 100\n  }), []);\n\n  // Example of consuming Grid Event\n  const cellClickedListener = useCallback(e => {\n    console.log(\"cellClickedListener\", e);\n  }, []);\n\n  // Example load data from server\n  // useEffect(() => {\n  //   fetch('https://www.ag-grid.com/example-assets/row-data.json')\n  //   .then(result => result.json())\n  //   .then(rowData => setRowData(rowData))\n  // }, []);\n\n  // Example using Grid's API\n  // const buttonListener = useCallback( (e : React.MouseEvent<HTMLButtonElement>) => {\n  //   gridRef.current && gridRef.current.api.deselectAll();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-alpine\",\n      style: {\n        height: tableHeight || 500,\n        width: tableWidth || 800\n      },\n      children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n        rowData: props.rows // Row Data for Rows\n        ,\n        columnDefs: props.cols // Column Defs for Columns\n        ,\n        defaultColDef: defaultColDef // Default Column Properties\n        ,\n        animateRows: true // Optional - set to 'true' to have rows animate when sorted\n        ,\n        rowSelection: \"multiple\" // Options - allows click selection of rows\n        ,\n        ref: gridRef // Ref for accessing Grid's API\n        // onCellClicked={cellClickedListener} // Optional - registering for Grid Event\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(DataTable, \"WMiRq9mljcQ5p9UEe7tWrxUYD74=\");\n_c = DataTable;\nexport default DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","useRef","useMemo","useCallback","AgGridReact","jsxDEV","_jsxDEV","DataTable","props","_s","tableHeight","tableWidth","gridRef","defaultColDef","sortable","minWidth","cellClickedListener","e","console","log","children","className","style","height","width","rowData","rows","columnDefs","cols","animateRows","rowSelection","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/VishwajithJayasinghe/Documents/MyDocs/Projects/React-front-end/src/components/data-table/data-table.component.tsx"],"sourcesContent":["import React, {\r\n  useRef,\r\n  useMemo,\r\n  useCallback,\r\n} from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\"; // the AG Grid React Component\r\n\r\nimport \"ag-grid-community/styles/ag-grid.css\"; // Core grid CSS, always needed\r\nimport \"ag-grid-community/styles/ag-theme-alpine.css\"; // Optional theme CSS\r\nimport { CellClickedEvent, ColDef } from \"ag-grid-community\";\r\n\r\nexport type DataTableProps = {\r\n  cols: ColDef[];\r\n  rows: any;\r\n  tableHeight?: number;\r\n  tableWidth? : number;\r\n};\r\n\r\nconst DataTable = (props: DataTableProps) => {\r\n  const { tableHeight, tableWidth } = props;\r\n  const gridRef = useRef<any>(); // Optional - for accessing Grid's API\r\n  //const [rowData, setRowData] = useState<string[]>(); // Set rowData to Array of Objects, one Object per Row\r\n\r\n  // Each Column Definition results in one Column.\r\n  // const [columnDefs, setColumnDefs] = useState([\r\n  //   {field: 'make', filter: true},\r\n  //   {field: 'model', filter: true},\r\n  //   {field: 'price'}\r\n  // ]);\r\n\r\n  // DefaultColDef sets props common to all Columns\r\n  const defaultColDef = useMemo<ColDef>(\r\n    () => ({\r\n      sortable: true,\r\n      minWidth: 100\r\n    }),\r\n    []\r\n  );\r\n\r\n  // Example of consuming Grid Event\r\n  const cellClickedListener = useCallback(\r\n    (e: CellClickedEvent<HTMLButtonElement>) => {\r\n      console.log(\"cellClickedListener\", e);\r\n    },\r\n    []\r\n  );\r\n\r\n  // Example load data from server\r\n  // useEffect(() => {\r\n  //   fetch('https://www.ag-grid.com/example-assets/row-data.json')\r\n  //   .then(result => result.json())\r\n  //   .then(rowData => setRowData(rowData))\r\n  // }, []);\r\n\r\n  // Example using Grid's API\r\n  // const buttonListener = useCallback( (e : React.MouseEvent<HTMLButtonElement>) => {\r\n  //   gridRef.current && gridRef.current.api.deselectAll();\r\n  // }, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Example using Grid's API */}\r\n      {/* <button onClick={buttonListener}>Push Me</button> */}\r\n\r\n      {/* On div wrapping Grid a) specify theme CSS Class Class and b) sets Grid size */}\r\n      <div className=\"ag-theme-alpine\" style={{ height: tableHeight || 500, width:tableWidth || 800 }}>\r\n        <AgGridReact\r\n          rowData={props.rows} // Row Data for Rows\r\n          columnDefs={props.cols} // Column Defs for Columns\r\n          defaultColDef={defaultColDef} // Default Column Properties\r\n          animateRows={true} // Optional - set to 'true' to have rows animate when sorted\r\n          rowSelection=\"multiple\" // Options - allows click selection of rows\r\n          ref={gridRef} // Ref for accessing Grid's API\r\n          // onCellClicked={cellClickedListener} // Optional - registering for Grid Event\r\n        ></AgGridReact>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IACVC,MAAM,EACNC,OAAO,EACPC,WAAW,QACN,OAAO;AACd,SAASC,WAAW,QAAQ,eAAe,CAAC,CAAC;;AAE7C,OAAO,sCAAsC,CAAC,CAAC;AAC/C,OAAO,8CAA8C,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUvD,MAAMC,SAAS,GAAIC,KAAqB,IAAK;EAAAC,EAAA;EAC3C,MAAM;IAAEC,WAAW;IAAEC;EAAW,CAAC,GAAGH,KAAK;EACzC,MAAMI,OAAO,GAAGX,MAAM,CAAM,CAAC,CAAC,CAAC;EAC/B;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMY,aAAa,GAAGX,OAAO,CAC3B,OAAO;IACLY,QAAQ,EAAE,IAAI;IACdC,QAAQ,EAAE;EACZ,CAAC,CAAC,EACF,EACF,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGb,WAAW,CACpCc,CAAsC,IAAK;IAC1CC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,CAAC,CAAC;EACvC,CAAC,EACD,EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACEX,OAAA;IAAAc,QAAA,eAKEd,OAAA;MAAKe,SAAS,EAAC,iBAAiB;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAEb,WAAW,IAAI,GAAG;QAAEc,KAAK,EAACb,UAAU,IAAI;MAAI,CAAE;MAAAS,QAAA,eAC9Fd,OAAA,CAACF,WAAW;QACVqB,OAAO,EAAEjB,KAAK,CAACkB,IAAK,CAAC;QAAA;QACrBC,UAAU,EAAEnB,KAAK,CAACoB,IAAK,CAAC;QAAA;QACxBf,aAAa,EAAEA,aAAc,CAAC;QAAA;QAC9BgB,WAAW,EAAE,IAAK,CAAC;QAAA;QACnBC,YAAY,EAAC,UAAU,CAAC;QAAA;QACxBC,GAAG,EAAEnB,OAAQ,CAAC;QACd;MAAA;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA5DIF,SAAS;AAAA6B,EAAA,GAAT7B,SAAS;AA8Df,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}